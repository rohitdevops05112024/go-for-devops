@Library('ot-central-ci') _  // Place @Library outside the pipeline block

pipeline {
    agent any

    environment {
        GOPATH = "${WORKSPACE}/go"
        GOROOT = "/usr/local/go"
        PATH = "${env.WORKSPACE}/bin:${env.PATH}"
    }

    stages {
        stage('Initialize Pipeline') {
            steps {
                script {
                    def cipipeline = new opstree.ci.templates.go_ci.go_ci()

                    cipipeline.call([
                        // WORKSPACE MANAGEMENT
                        clean_workspace: true,
                        ignore_clean_workspace_failure: false,
                        delete_dirs: false,
                        clean_when_build_aborted: true,
                        clean_when_build_failed: true,
                        clean_when_not_built: true,
                        clean_when_build_succeed: true,
                        clean_when_build_unstable: true,

                        // VCS MANAGEMENT
                        repo_https_url: "https://github.com/rohitdevops05112024/go-for-devops.git",
                        repo_ssh_url: "git@github.com:rohitdevops05112024/go-for-devops.git",
                        repo_branch: "main",
                        repo_url_type: "http",
                        jenkins_git_creds_id: "23797119-12d2-4012-9617-72a0315427e8",
                        source_code_path: "go-for-devops",

                        // Dependency Scanning
                        dependency_check: false,
                        dependency_scan_tool: "owasp",
                        owasp_project_name: "go_project",
                        owasp_report_publish: true,
                        owasp_report_format: "json",
                        fail_job_if_dependency_returned_exception: true,

                        // Creds Scanning
                        gitleaks_check: false,
                        fail_job_if_leak_detected: false,
                        gitleaks_report_format: "html",
                        gitleaks_report_jenkins_publish: false,

                        // Build Configuration
                        perform_code_build: true,
                        build_tool: "go",
                        pre_build_commands: [
                            'if [ ! -f go.mod ]; then go mod init example.com/go-app; fi',  // Navigate to the correct directory
                             'go mod tidy',  // Initialize Go module if needed
                            'docker run --rm -v /var/lib/jenkins/workspace/rohit_golang_finalAttempt/go-for-devops:/app -w /app golang:1.18 sh -c 'go build -o output_binary ./Day-11/go-rest-api''
                        ],

                        // Unit Testing
                        unit_testing_check: true,
                        fail_job_if_unit_issue_detected: false,
                        unit_test_reports_path: "test_report.json",

                        // Static Code Analysis
                        codebase_to_scan_directory: "**",
                        static_code_analysis_check: false,
                        path_to_sonar_properties: "sonar-project.properties",
                        fail_job_if_analysis_returned_exception: false,
                        jenkins_sonarqube_token_creds_id: "sonar-token",

                        // Docker Build
                        perform_build_dockerfile: false,
                        image_name: "go-app",
                        dockerfile_location: "/Dockerfile",
                        dockerfile_context: "./Day-11/go-rest-api",  // Docker build context set to correct path

                        // Image Scanning
                        image_scanning_check: false,
                        image_tag: "latest",
                        scan_severity: "CRITICAL",
                        image_scanning_report_publish: true,

                        // Image size validator
                        image_size_validator_check: false,
                        max_allowed_image_size: 100,
                        fail_job_if_validation_fail: false,

                        // Publish Artifact (Docker Image)
                        artifact_publish_check: false,
                        artifact_destination_type: "ecr",
                        jenkins_aws_credentials_id: "aws-credentials-id",
                        docker_image_name: "go-app",
                        ecr_repo_name: "go-app-repo",
                        ecr_region: "us-east-1",
                        account_id: "123456789012",

                        // Notification
                        notification_enabled: false,
                        notification_channel: "teams",
                        webhook_url_creds_id: "teams_webhook"
                    ])
                }
            }
        }
    }
}
